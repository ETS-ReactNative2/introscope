// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`options removeImport 1`] = `
"
// @introscope removeImports: ['defaultImport1', 'singleNamedImport1', 'namedImport1', 'namedImport2', 'localImportName1', 'namespaceImport1']
import defaultImport1 from 'some-module1';
import defaultImport2 from 'some-module2';
import { singleNamedImport1 } from 'some-module2';
import { singleNamedImport2 } from 'some-module3';
import { namedImport1, namedImport2 } from 'some-module4';
import { namedImport3, namedImport4 } from 'some-module5';
import { originalImportName1 as localImportName1 } from 'some-module6';
import { originalImportName2 as localImportName2 } from 'some-module7';
import * as namespaceImport1 from 'some-module8';
import * as namespaceImport2 from 'some-module9';

module.exports = function (_scope = {}) {
    _scope.defaultImport1 = defaultImport1;
    _scope.defaultImport2 = defaultImport2;
    _scope.singleNamedImport1 = singleNamedImport1;
    _scope.singleNamedImport2 = singleNamedImport2;
    _scope.namedImport1 = namedImport1;
    _scope.namedImport2 = namedImport2;
    _scope.namedImport3 = namedImport3;
    _scope.namedImport4 = namedImport4;
    _scope.localImportName1 = localImportName1;
    _scope.localImportName2 = localImportName2;
    _scope.namespaceImport1 = namespaceImport1;
    _scope.namespaceImport2 = namespaceImport2;
    [_scope.defaultImport1, _scope.defaultImport2, _scope.singleNamedImport1, _scope.singleNamedImport2, _scope.namedImport1, _scope.namedImport2, _scope.namedImport3, _scope.namedImport4, _scope.localImportName1, _scope.localImportName2, _scope.namespaceImport1, _scope.namespaceImport2];
    return _scope;
};"
`;

exports[`plugin assignments 1`] = `
"module.exports = function (_scope = {}) {
            let x;
            _scope.x++;
            _scope.x = 1;
            return _scope;
};"
`;

exports[`plugin declarations 1`] = `
"module.exports = function (_scope = {}) {
            _scope.functionName = functionName;

            let noInitValue;
            for (var forVar = _scope.forVar = 0; _scope.forVar != 0; _scope.forVar++);
            let singleInit = _scope.singleInit = 1;
            let doubleInit1 = _scope.doubleInit1 = 1,
                doubleInit2 = _scope.doubleInit2 = 2;
            var sameDoubleInit = 1,
                sameDoubleInit = _scope.sameDoubleInit = 2;
            _scope.ClassName = class ClassName {};
            ;new _scope.ClassName();
            (0, _scope.functionName)();function functionName() {}
            return _scope;
};"
`;

exports[`plugin export 1`] = `
"module.exports = function (_scope = {}) {
            let defaultExport, toBeNameExport1, toBeNameExport2;
            _scope.default = _scope.defaultExport;
            const namedSingleExport = _scope.namedSingleExport = 'namedSingleExportValue';
            return _scope;
};"
`;

exports[`plugin globals 1`] = `
"module.exports = function (_scope = {}) {
            var global2, global1, globalFunction, nestedGlobal1;

            let x = _scope.x = _scope.global1;
            _scope.global2 = 1;
            _scope.global2 = 1;
            (0, _scope.globalFunction)();
            !function () {
                        return [_scope.nestedGlobal1, _scope.global2];
            }();
            return _scope;
};"
`;

exports[`plugin import 1`] = `
"
import 'some-module1';
import defaultImport from 'some-module2';
import { singleNamedImport } from 'some-module3';
import { namedImport1, namedImport2 } from 'some-module4';
import { originalImportName as localImportName } from 'some-module5';
import * as namespaceImport from 'some-module6';

module.exports = function (_scope = {}) {
            _scope.defaultImport = defaultImport;
            _scope.singleNamedImport = singleNamedImport;
            _scope.namedImport1 = namedImport1;
            _scope.namedImport2 = namedImport2;
            _scope.localImportName = localImportName;
            _scope.namespaceImport = namespaceImport;
            [_scope.defaultImport, _scope.singleNamedImport, _scope.namedImport1, _scope.namedImport2, _scope.localImportName, _scope.namespaceImport];
            return _scope;
};"
`;

exports[`plugin references 1`] = `
"module.exports = function (_scope = {}) {
            let x;
            (0, _scope.x)();
            !function () {
                        _scope.x++;
            };
            () => {
                        return { x: _scope.x };
            };
            return _scope;
};"
`;

exports[`plugin scopes 1`] = `
"module.exports = function (_scope = {}) {
            let x = _scope.x = true;
            for (let x = 0; x != 0; x++);
            {
                        let x = false;
            }
            !function () {
                        var x = false;
            };
            return _scope;
};"
`;
