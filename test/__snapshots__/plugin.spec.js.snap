// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`options disable 1`] = `
"
let shouldBeUntouched = true;"
`;

exports[`options disable 2`] = `
"export const introscope = function (_scope = {}) {
            // inline \\"disable\\" is ignored, use \\"enable\\": false
            // @introscope \\"disable\\": true
            let shouldBeTransformed = _scope.shouldBeTransformed = true;
            return _scope;
};"
`;

exports[`options disable 3`] = `
"export const introscope = function (_scope = {}) {
            let shouldBeTransformed = _scope.shouldBeTransformed = true;
            return _scope;
};"
`;

exports[`options does nothing if NODE_ENV != "test" 1`] = `
"
var shouldBeUntouched = true;"
`;

exports[`options does nothing if NODE_ENV != "test" 2`] = `
"
var shouldBeUntouched = true;"
`;

exports[`options does nothing if NODE_ENV != "test" 3`] = `
"export const introscope = function (_scope = {}) {
            var shouldBeTransformed = _scope.shouldBeTransformed = true;
            return _scope;
};"
`;

exports[`options enable 1`] = `
"
let shouldBeUntouched = true;"
`;

exports[`options enable 2`] = `
"
// @introscope \\"enable\\": false
let shouldBeUntouched = true;"
`;

exports[`options enable 3`] = `
"export const introscope = function (_scope = {}) {
            // @introscope \\"enable\\": true
            let shouldBeTransformed = _scope.shouldBeTransformed = true;
            return _scope;
};"
`;

exports[`options exportName uses default 1`] = `
"
// no exportName
export const introscope = function (_scope = {}) {
                return _scope;
};"
`;

exports[`options exportName works with magic comment 1`] = `
"
// @introscope \\"exportName\\": \\"microscope1\\"
export const microscope1 = function (_scope = {}) {
                return _scope;
};"
`;

exports[`options exportName works with plugin options 1`] = `
"
// code
export const microscope = function (_scope = {}) {
                return _scope;
};"
`;

exports[`options ignore 1`] = `
"export const introscope = function (_scope = {}) {
    var deepGlobal;
    _scope.throwError = throwError;

    // @introscope \\"ignore\\": [\\"localIgnored\\", \\"Error\\", \\"deepGlobalIgnored\\"]
    const x = _scope.x = { deep: { global: { variable: _scope.deepGlobal, variableIgnored: deepGlobalIgnored } } };
    const localIgnored = 1;
    localIgnored++;
    function throwError(message) {
        throw new Error(message);
    }
    return _scope;
};"
`;

exports[`options removeImports 1`] = `
"export const introscope = function (_scope = {}) {
            _scope.sholdBeRemoved++;
            return _scope;
};"
`;

exports[`options removeImports 2`] = `
"export const introscope = function (_scope = {}) {
            _scope.sholdBeRemoved++;
            // @introscope \\"removeImports\\": true

            return _scope;
};"
`;

exports[`options removeImports 3`] = `
"
// @introscope \\"removeImports\\": false
import sholdNotBeRemoved from 'some-module1';
export const introscope = function (_scope = {}) {
            _scope.sholdNotBeRemoved = sholdNotBeRemoved;
            _scope.sholdNotBeRemoved++;
            return _scope;
};"
`;

exports[`options removeImports 4`] = `
"
// @introscope \\"removeImports\\": true
import sholdNotBeRemoved from 'some-module1';
export const introscope = function (_scope = {}) {
            _scope.sholdNotBeRemoved = sholdNotBeRemoved;
            _scope.sholdNotBeRemoved++;
            // last takes precedence
            // @introscope \\"removeImports\\": false

            return _scope;
};"
`;

exports[`options removeImports 5`] = `
"
import sholdNotBeRemoved from 'some-module1';
export const introscope = function (_scope = {}) {
            var defaultImport1;
            _scope.sholdNotBeRemoved = sholdNotBeRemoved;
            _scope.defaultImport1++;
            return _scope;
};"
`;

exports[`plugin assignments 1`] = `
"export const introscope = function (_scope = {}) {
            let x;
            _scope.x++;
            _scope.x = 1;
            return _scope;
};"
`;

exports[`plugin declarations 1`] = `
"export const introscope = function (_scope = {}) {
            _scope.functionName = functionName;

            let noInitValue;
            for (var forVar = _scope.forVar = 0; _scope.forVar != 0; _scope.forVar++);
            let singleInit = _scope.singleInit = 1;
            let doubleInit1 = _scope.doubleInit1 = 1,
                doubleInit2 = _scope.doubleInit2 = 2;
            var sameDoubleInit = 1,
                sameDoubleInit = _scope.sameDoubleInit = 2;

            let { singleDestructing } = 1,
                _temp = _scope.singleDestructing = singleDestructing;
            var { objectDestruction1, objectDestruction2, nestedProperty: { objectNestedDestruction1 } } = { objectDestruction1: _scope.objectDestruction1, objectDestruction2: _scope.objectDestruction2, nestedProperty: { objectNestedDestruction1: _scope.objectNestedDestruction1 } },
                _temp4 = _scope.objectNestedDestruction1 = objectNestedDestruction1,
                _temp3 = _scope.objectDestruction2 = objectDestruction2,
                _temp2 = _scope.objectDestruction1 = objectDestruction1,
                let2 = _scope.let2 = _scope.objectDestruction1;
            let { ...objectRest } = 1,
                _temp5 = _scope.objectRest = objectRest;
            var [arrayDestruction1, arrayDestruction2, [arrayNestedDestruction]] = [_scope.arrayDestruction1, _scope.arrayDestruction2, [_scope.arrayNestedDestruction]],
                _temp8 = _scope.arrayNestedDestruction = arrayNestedDestruction,
                _temp7 = _scope.arrayDestruction2 = arrayDestruction2,
                _temp6 = _scope.arrayDestruction1 = arrayDestruction1;
            let [...arrayRest] = 1,
                _temp9 = _scope.arrayRest = arrayRest;

            _scope.ClassName = class ClassName {};
            ;new _scope.ClassName();
            (0, _scope.functionName)();function functionName() {}
            return _scope;
};"
`;

exports[`plugin export 1`] = `
"export const introscope = function (_scope = {}) {
            let defaultExport, toBeNameExport1, toBeNameExport2;
            _scope.default = _scope.defaultExport;
            const namedSingleExport = _scope.namedSingleExport = 'namedSingleExportValue';
            return _scope;
};"
`;

exports[`plugin flow 1`] = `
"
import type { TypeImportedTypeShouldBeIgnored } from 'x';
import { type ImportedTypeShouldBeIgnored } from 'y';
export const introscope = function (_scope = {}) {
            type LocalTypeShouldBeIgnored = ImportedTypeShouldBeIgnored | TypeImportedTypeShouldBeIgnored;
            return _scope;
};"
`;

exports[`plugin flow 2`] = `
"export const introscope = function (_scope = {}) {
    _scope.typedFuntion = typedFuntion;

    type SomeType = number;
    type SomeOtherType = SomeType;
    function typedFuntion(x: SomeType): SomeOtherType {
        let typedVar: SomeType | SomeOtherType = 123;
    }
    return _scope;
};"
`;

exports[`plugin globals 1`] = `
"export const introscope = function (_scope = {}) {
            var global2, global1, globalFunction, nestedGlobal1;

            let x = _scope.x = _scope.global1;
            _scope.global2 = 1;
            _scope.global2 = 1;
            (0, _scope.globalFunction)();
            !function () {
                        return [_scope.nestedGlobal1, _scope.global2];
            }();
            return _scope;
};"
`;

exports[`plugin import 1`] = `
"
import 'some-module1';
import defaultImport from 'some-module2';
import { singleNamedImport } from 'some-module3';
import { namedImport1, namedImport2 } from 'some-module4';
import { originalImportName as localImportName } from 'some-module5';
import * as namespaceImport from 'some-module6';

export const introscope = function (_scope = {}) {
    _scope.defaultImport = defaultImport;
    _scope.singleNamedImport = singleNamedImport;
    _scope.namedImport1 = namedImport1;
    _scope.namedImport2 = namedImport2;
    _scope.localImportName = localImportName;
    _scope.namespaceImport = namespaceImport;
    [_scope.defaultImport, _scope.singleNamedImport, _scope.namedImport1, _scope.namedImport2, _scope.localImportName, _scope.namespaceImport];
    return _scope;
};"
`;

exports[`plugin import 2`] = `
"export const introscope = function (_scope = {}) {

    [_scope.defaultImport, _scope.singleNamedImport, _scope.namedImport1, _scope.namedImport2, _scope.localImportName, _scope.namespaceImport];
    return _scope;
};"
`;

exports[`plugin references 1`] = `
"export const introscope = function (_scope = {}) {
            let x;
            (0, _scope.x)();
            !function () {
                        _scope.x++;
            };
            () => {
                        return { x: _scope.x };
            };
            !{ x: _scope.x };
            return _scope;
};"
`;

exports[`plugin scopes 1`] = `
"export const introscope = function (_scope = {}) {
            let x = _scope.x = true;
            for (let x = 0; x != 0; x++);
            {
                        let x = false;
            }
            !function () {
                        var x = false;
            };
            return _scope;
};"
`;

exports[`test does normal transpilation if enabled in code 1`] = `
"
import { introscope } from 'directModule';
import { introscope as renamed } from 'renamedModule';
import { otherNamedImport } from 'otheModule';

// @introscope \\"enable\\": true

export const introscope = function (_scope = {}) {
    _scope.introscope = introscope;
    _scope.renamed = renamed;
    _scope.otherNamedImport = otherNamedImport;
    return _scope;
};"
`;

exports[`test does normal transpilation if enabled in opts 1`] = `
"
import { introscope } from 'directModule';
import { introscope as renamed } from 'renamedModule';
import { otherNamedImport } from 'otheModule';
export const introscope = function (_scope = {}) {
    _scope.introscope = introscope;
    _scope.renamed = renamed;
    _scope.otherNamedImport = otherNamedImport;
    return _scope;
};"
`;

exports[`test in test code does transpile only introscope import 1`] = `
"
import { introscope } from 'directModule?introscope';
import { introscope as renamed } from 'renamedModule?introscope';
import { otherNamedImport } from 'otheModule';"
`;

exports[`test in test code does transpile only introscope import 2`] = `
"
import { introscope } from 'directModule';
import { introscope as renamed } from 'renamedModule';
import { otherNamedImport } from 'otheModule';"
`;
